# Logstash configuration for Gitlab audit & application log via filebeat
# GitLab(Filebeat) -> Logstash -> Splunk.

input {
  beats {
    port => 5044
  }
}

filter {
  if [fields][log_type] =~ "application" {
    grok {
      break_on_match => true
      match => {"message" => "\A%{TIMESTAMP_ISO8601:logDate}: %{DATA:status}: username=%{USERNAME:username} ip=%{IP:clientIP}"}
      match => {"message" => "\A%{TIMESTAMP_ISO8601:logDate}: %{GREEDYDATA:logData}"}
      overwrite => ["message"]
    }
    prune {
      interpolate => true
      whitelist_names => ["logDate", "status", "username", "clientIP", "logData", "fields"]
    }
  } else if [fields][log_type] =~ "audit" {
    grok {
      match => {"message" => "\A\{\"severity\":\"%{LOGLEVEL:logLevel}\",\"time\":\"%{TIMESTAMP_ISO8601:logDate}\",\"correlation_id\":\"%{WORD:correlationID}\",\"author_id\":%{USER:uid},\"author_name\":\"%{DATA:username}\",\"entity_id\":%{USER},\"entity_type\":\"%{WORD:loginType}\",\"with\":\"%{WORD:authMethod}\",\"target_id\":%{USER},\"target_type\":\"%{WORD}\",\"target_details\":\"(?:%{WORD}\s*)*\"\}"}
    }
    prune {
      interpolate => true
      whitelist_names => ["logDate", "logLevel", "username", "uid", "authMethod", "loginType", "configurationID", "fields"]
    }
  }
}

output {
  if [fields][sys_type] =~ "gitlab" {
    http {
      http_method => "post"
      url => "http://SPLUNK_IP:8088/services/collector/raw"
      headers => ["Authorization", "Splunk SPLUNK_HEC_TOKEN"]
      codec => "json"
      content_type => "application/json"
    }
}